{
    "env": {
        "es2022": true,
        "node": true,
        "browser": true
    },
    // Base configuration
    "extends": ["eslint:recommended", "plugin:node/recommended"],
    "parserOptions": {
        "ecmaVersion": 13,
        // Update to ESM modules (import)
        "sourceType": "module",
        "ecmaFeatures": {
            "impliedStrict ": true,
            // why would someone do this ?
            "globalReturn": false
        }
    },
    "globals": {
        "app": "readonly"
    },
    "plugins": [
        // Lint scripts embedded in HTML pages
        "html",
        // additional set of rules for node.js
        "node"
    ],
    "settings": {
        // extensions of HTML files to be linted
        "html/html-extensions": [".html"],
        "html/javascript-tag-names": ["script"],
        // do not include 'module' type ...
        "html/javascript-mime-types": ["text/javascript"]
    },
    "rules": {
        // ===== Override default options for eslint:recommended rules ====
        // ------------------- indent & formatting ------------------------
        "indent": ["error", 4],
        "linebreak-style": ["error", "unix"],
        "quotes": ["error", "backtick", {
            "avoidEscape": true,
            "allowTemplateLiterals": true
        }],
        "semi": ["error", "always"],
        // --------------------- possible errors --------------------------
        // use Promise.all or recursive async calls instead ...
        "no-await-in-loop": ["error"],
        // keep as-is, remember to wrap assignments in parentheses ...
        "no-cond-assign": ["error", "except-parens"],
        // a while (true) loop until a condition is met inside the loop body is sometimes necessary ...
        "no-constant-condition": ["error", {
            "checkLoops": false
        }],
        "no-extra-parens": ["error", "all", {
            "conditionalAssign": false,
            "returnAssign": false,
            "nestedBinaryExpressions": false,
            "enforceForArrowConditionals": false
        }],
        "no-inner-declarations": ["error", "both"],
        // this rule remains as-is as there are very few exceptions to it ...
        "no-loss-of-precision": ["error"],
        "no-promise-executor-return": ["error"],
        "no-template-curly-in-string": ["error"],
        "no-unreachable-loop": ["error"],
        "no-unsafe-negation": ["error", {
            "enforceForOrderingRelations": true
        }],
        "no-useless-backreference": ["error"],
        "require-atomic-updates": ["error"],
        // --------------------- best practices ---------------------------
        "accessor-pairs": ["error", {
            "getWithoutSet": true,
            "setWithoutGet": true,
            "enforceForClassMembers": true
        }],
        "array-callback-return": ["error"],
        "block-scoped-var": ["error"],
        // this rule remains as-is as there are very few exceptions to it ...  
        "class-methods-use-this": ["error"],
        // keeping this at 20 but downgrading to warn, sometimes a high complexity threshold is required ...
        "complexity": ["warn", {
            "max": 20
        }],
        "consistent-return": ["error"],
        "default-case": ["error"],
        "default-case-last": ["error"],
        "default-param-last": ["error"],
        "eqeqeq": ["error", "always"],
        "grouped-accessor-pairs": ["error", "getBeforeSet"],
        // very important ...
        "guard-for-in": ["error"],
        // I mean cmon it's 2021 ... use console for this stuff.
        "no-alert": ["error"],
        "no-caller": ["error"],
        "no-case-declarations": ["error"],
        "no-constructor-return": ["error"],
        "no-else-return": ["error"],
        "no-empty-function": ["warn"],
        "no-empty-pattern": ["error"],
        "no-eq-null": ["error"],
        "no-eval": ["error"],
        "no-extend-native": ["error"],
        "no-extra-bind": ["error"],
        // this rule remains as-is as there are very few exceptions to it ...
        "no-floating-decimal": ["error"],
        "no-implicit-coercion": ["warn"],
        "no-implicit-globals": ["error"],
        "no-implied-eval": ["error"],
        // this rule remains as-is as there are very few exceptions to it ...
        "no-invalid-this": ["error"],
        "no-iterator": ["error"],
        "no-labels": ["error"],
        "no-lone-blocks": ["error"],
        "no-loop-func": ["error"],
        "no-multi-str": ["error"],
        "no-new-func": ["error"],
        "no-new-wrappers": ["error"],
        "no-octal-escape": ["error"],
        // this rule remains as-is as there are very few exceptions to it ...        
        "no-param-reassign": ["error"],
        "no-proto": ["error"],
        // upgrade to error to enforce wrapping of assignments in parentheses ...
        "no-return-assign": ["error", "except-parens"],
        "no-return-await": ["error"],
        "no-script-url": ["error"],
        "no-self-compare": ["error"],
        "no-throw-literal": ["warn"],
        "no-unmodified-loop-condition": ["error"],
        // enforce the use of semicolons at the end of expressions ...
        "no-unused-expressions": ["error", {
            "allowShortCircuit": true,
            "allowTernary": true
        }],
        "no-useless-call": ["error"],
        "no-useless-concat": ["error"],
        "no-useless-escape": ["error"],
        "no-useless-return": ["warn"],
        "no-void": ["error", {
            "allowAsStatement": true
        }],
        // this comment pattern is useful as a reminder since the exclamation marks often flag code shortcomings and limitations ...
        "no-warning-comments": ["warn", {
            "terms": ["!!!"],
            "location": "anywhere"
        }],
        // upgrade this to error to enforce the use of non capturing groups when required ...
        "prefer-named-capture-group": ["error"],
        "prefer-promise-reject-errors": ["error"],
        "prefer-regex-literals": ["error", {
            "disallowRedundantWrapping": true
        }],
        // very important ...
        "require-await": ["error"],
        // the /u flag will have the regexp engine parse code points instead of code units/surrogate pairs ... 
        "require-unicode-regexp": ["error"],
        "vars-on-top": ["error"],
        "wrap-iife": ["error", "inside", {
            "functionPrototypeMethods": true
        }],
        "yoda": ["error"],
        // ----------------------- strict mode ----------------------------
        "strict": ["warn"],
        // ------------------------ variables -----------------------------
        "init-declarations": ["error", "always"],
        "no-label-var": ["error"],
        // allow shadowing of built-ins global variables
        "no-shadow": ["warn", {
            "builtinGlobals": false,
            "hoist": "all",
            "allow": []
        }],
        "no-undef-init": ["error"],
        "no-undefined": ["error"],
        "no-use-before-define": ["error"],
        // --------------------- stylistic issues -------------------------
        "array-bracket-spacing": ["warn", "always"],
        "block-spacing": ["error", "always"],
        // maybe switch single-line to true later ... 
        "brace-style": ["error", "1tbs", {
            "allowSingleLine": true
        }],
        "comma-dangle": ["error", "never"],
        "comma-spacing": ["error", {
            "before": false,
            "after": true
        }],
        "comma-style": ["error", "last"],
        "computed-property-spacing": ["error", "never"],
        "consistent-this": ["warn", "_this"],
        "func-call-spacing": ["error", "never"],
        "func-name-matching": ["error", "always"],
        // makes sense since we cill force the use of functions expressions ...
        "func-names": ["error", "never"],
        // the purpose is to prevent any function from being hoisted to the top of its scope ...
        "func-style": ["error", "expression"],
        "function-call-argument-newline": ["warn", "consistent"],
        // keep this rule as-is, not flexible enough ...
        "id-match": ["warn", "^[0-9a-zA-Z_$]+$", {
            "properties": true,
            "onlyDeclarations": false,
            "ignoreDestructuring": true
        }],
        "key-spacing": ["error", {
            "mode": "strict"
        }],
        "keyword-spacing": ["error"],
        "lines-between-class-members": ["error", "always"],
        "max-depth": ["warn", {
            "max": 4
        }],
        // note to self : exercise caution before upping this value ...
        "max-nested-callbacks": ["error", {
            "max": 4
        }],
        "max-statements-per-line": ["warn", {
            "max": 3
        }],
        "new-parens": ["error"],
        // making newline mandatory at each chained call ...
        "newline-per-chained-call": ["error"],
        "no-array-constructor": ["error"],
        // this rule will be upgraded to error, bitwise is only to be used in very specific cases ...  
        "no-bitwise": ["error"],
        "no-lonely-if": ["error"],
        "no-multi-assign": ["error"],
        "no-multiple-empty-lines": ["error"],
        "no-negated-condition": ["error"],
        "no-new-object": ["error"],
        "no-trailing-spaces": ["error"],
        "no-unneeded-ternary": ["warn", {
            "defaultAssignment": true
        }],
        "no-whitespace-before-property": ["error"],
        "nonblock-statement-body-position": ["error", "below"],
        "object-curly-newline": ["error", {
            "ObjectExpression": {
                "multiline": true,
                "minProperties": 10,
                "consistent": true
            },
            "ObjectPattern": "never"
        }],
        "object-curly-spacing": ["warn"],
        // this rule remains as-is as there are very few exceptions to it ...  
        "object-property-newline": ["error", {
            "allowAllPropertiesOnSameLine": true
        }],
        "one-var": ["error", "consecutive"],
        "one-var-declaration-per-line": ["error", "always"],
        "operator-assignment": ["warn", "always"],
        // force the use of end-of-line operators for multi-lines expressions ...
        "operator-linebreak": ["error", "after"],
        // keeping this disabled on the side to (maye) fine tune later, but enabling it really removes some flexibility ...
        "padding-line-between-statements": ["off", {
            "blankLine": "always",
            "prev": "*",
            "next": ["if", "for", "class", "const", "do", "let", "return", "switch", "try", "var", "while"]
        }],
        "prefer-exponentiation-operator": ["error"],
        "prefer-object-spread": ["warn"],
        "quote-props": ["error", "as-needed"],
        "semi-spacing": ["error"],
        "space-before-blocks": ["error", "always"],
        "space-before-function-paren": ["error", "never"],
        "space-in-parens": ["error", "never"],
        "space-infix-ops": ["error"],
        "space-unary-ops": ["error", {
            "words": true,
            "nonwords": false
        }],
        "spaced-comment": ["error", "always"],
        "switch-colon-spacing": ["error", {
            "after": true,
            "before": true
        }],
        "template-tag-spacing": ["error"],
        "unicode-bom": ["error"],
        // ----------------------- ECMAScript 6 ---------------------------
        "arrow-body-style": ["warn", "as-needed"],
        "arrow-parens": ["error", "as-needed"],
        "arrow-spacing": ["error"],
        "generator-star-spacing": ["error", {
            "before": true,
            "after": false
        }],
        // enforces wrapping short ifs in parentheses ...
        "no-confusing-arrow": ["error", {
            "allowParens": true
        }],
        "no-duplicate-imports": ["error"],
        "no-useless-computed-key": ["error", {
            "enforceForClassMembers": true
        }],
        "no-useless-rename": ["error"],
        "no-var": ["error"],
        "object-shorthand": ["error", "consistent"],
        "prefer-arrow-callback": ["warn"],
        "prefer-const": ["warn", {
            "destructuring": "all",
            "ignoreReadBeforeAssign": false
        }],
        "prefer-numeric-literals": ["error"],
        "prefer-rest-params": ["error"],
        "prefer-spread": ["error"],
        // downgrading to warn, sometimes exceptions improve code readability ...
        "prefer-template": ["warn"],
        "rest-spread-spacing": ["error"],
        "symbol-description": ["warn"],
        "template-curly-spacing": ["error", "always"],
        "yield-star-spacing": ["error", {
            "before": true,
            "after": false
        }],
        // =============== Disable eslint:recommended rules ===============
        // --------------------- possible errors --------------------------
        "no-sparse-arrays": ["off"],
        // deprecated, but shows up in vscode after the node plugin install
        "no-process-exit": ["off"],
        // --------------------- best practices ---------------------------
        // ----------------------- strict mode ----------------------------
        // ------------------------ variables -----------------------------
        "no-unused-vars": ["warn"],
        // --------------------- stylistic issues -------------------------
        // ----------------------- ECMAScript 6 ---------------------------
        // == Override default options for plugin:node/recommended rules ==
        // --------------------- possible errors --------------------------
        "node/handle-callback-err": ["error", "^(e|err|error\\w*)$"],
        // too bad callback name is not regex-configurable ...
        "node/no-callback-literal": ["error"],
        // downgrade to warn in the event the code is to run inside a container ... 
        "node/no-missing-import": ["warn"],
        "node/no-missing-require": ["warn"],
        "node/no-new-require": ["error"],
        // CJS specific (__filename and __dirname are not supported in ESM)
        "node/no-path-concat": ["error"],
        // --------------------- best practices ---------------------------
        // --------------------- stylistic issues -------------------------
        // very important rule, update callbacks names list when necessary
        "node/callback-return": ["error", ["callback", "cb", "next"]],
        // CJS specific
        "node/exports-style": ["error", "module.exports"],
        // restrict imports to *.js files for now
        "node/file-extension-in-import": ["error", "always", {
            ".js": "always"
        }],
        "node/global-require": ["error"],
        "node/no-mixed-requires": ["warn", {
            "grouping": false,
            "allowCall": true
        }],
        // warn about usage without prevent it : that's the only way to
        // pass environment variables to a containerized process and preventing
        // it would lead to a 'one image per configuration' policy
        "node/no-process-env": ["warn"],
        // keep this list up-to-date with my personal dislikes hehe
        "node/no-restricted-import": ["error", [{
            "name": "axios",
            "message": "You can achieve the same results with node.js builtins"
        }, {
            "name": "async",
            "message": "You can achieve the same results with node.js builtins"
        }]],
        // necessary in a handful of case, so it's only a warn
        "node/no-sync": ["warn"],
        // enforce the use of imports to follow node.js official recommendations ...
        "node/prefer-global/buffer": ["error", "never"],
        "node/prefer-global/console": ["error", "never"],
        "node/prefer-global/process": ["error", "never"],
        "node/prefer-global/text-decoder": ["error", "never"],
        "node/prefer-global/text-encoder": ["error", "never"],
        "node/prefer-global/url-search-params": ["error", "never"],
        "node/prefer-global/url": ["error", "never"],
        // those may be upgraded to error later, only a warn for now
        "node/prefer-promises/dns": ["warn"],
        "node/prefer-promises/fs": ["warn"],
        // ============ Disable plugin:node/recommended rules =============        
        // --------------------- possible errors --------------------------
        // for the moment I prefer shell aliases + shebang over package.json bin field
        "node/shebang": ["off"],
        // unnecessary if errors are properly handled
        "node/no-process-exit": ["off"]
        // --------------------- best practices ---------------------------
        // --------------------- stylistic issues -------------------------
    },
    // Disable ESLint inline comments
    "noInlineConfig": false,
    // Don't look for ESLint files in parent folders
    "root": true
}